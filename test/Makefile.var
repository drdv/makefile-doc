# -------------------------------------------------
# WARNING
# --------------------------------------------------------
# Using inline comments for variables is not a good idea because the variable value
# would contain the extra space(s) between the value and the comment. For example,
# consider the following Makefile:
#
# DIR = important ## do not delete
# clean: ## remove generated stuff
#     rm -rf $(DIR).extra-info-dir
#
# If we run make clean, the command would expand to rm -rf $(DIR) .extra-info-dir
# instead of what we want: rm -rf $(DIR).extra-info-dir. Note that, normally, editors
# delete training space on save.
#
# The formatting of comments in this file is only for testing purposes.
# -------------------------------------------------

# all these should be alligned well in the docs
   VAR1    =1 ## First variable
 VAR2:=   1    ## Second variable
VAR3 ::=   1 ##     Third variable

##@
##@ ----- Will be associated with the next anchor (which happens to be a variable) -----
##@

##! Varianle with top docs
## here I wanted to test with :::=
## but it has been introduced in GNU Make 4.4
## and the tests on ubuntu fail (it has GNU Make 4.3)
VAR4 ::= 1 ## this will not be shown
AWK := awk
AWK_FLAGS :=

VARS = # VARS CLA for our Awk script

.PHONY: help
## second line in the description of the target help
help:
	@bin/$(AWK) $(AWK_FLAGS) -v VARS=$(VARS) \
		-f ../makefile-doc.awk $(MAKEFILE_LIST)

VAR5:=1 ##% A big mess
#VAR6:=1 ##% This shouldn't appear
#commented-out-target: ## with some docs (but this should not appear)

##@
##@ ----- This section in anchored on a target -----
##@

test-10: ##% some target

VAR7 = ##% another variable

## A one letter variable
v = 1
